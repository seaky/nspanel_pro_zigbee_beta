import { createEslintRule } from '../utils/create-eslint-rule.mjs'
import { getGroupNumber } from '../utils/get-group-number.mjs'
import { getSourceCode } from '../utils/get-source-code.mjs'
import { toSingleLine } from '../utils/to-single-line.mjs'
import { rangeToDiff } from '../utils/range-to-diff.mjs'
import { isPositive } from '../utils/is-positive.mjs'
import { sortNodes } from '../utils/sort-nodes.mjs'
import { makeFixes } from '../utils/make-fixes.mjs'
import { complete } from '../utils/complete.mjs'
import { pairwise } from '../utils/pairwise.mjs'
import { compare } from '../utils/compare.mjs'
const sortArrayIncludes = createEslintRule({
  name: 'sort-array-includes',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted arrays before include method.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
          groupKind: {
            description: 'Specifies top-level groups.',
            enum: ['mixed', 'literals-first', 'spreads-first'],
            type: 'string',
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedArrayIncludesOrder:
        'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
      groupKind: 'literals-first',
    },
  ],
  create: context => ({
    MemberExpression: node => {
      if (
        (node.object.type === 'ArrayExpression' ||
          node.object.type === 'NewExpression') &&
        node.property.type === 'Identifier' &&
        node.property.name === 'includes'
      ) {
        let elements =
          node.object.type === 'ArrayExpression'
            ? node.object.elements
            : node.object.arguments
        if (elements.length > 1) {
          let options = complete(context.options.at(0), {
            groupKind: 'literals-first',
            type: 'alphabetical',
            ignoreCase: true,
            order: 'asc',
          })
          let sourceCode = getSourceCode(context)
          let nodes = elements
            .reduce(
              (accumulator, element) => {
                if (element !== null) {
                  let group = 'unknown'
                  if (typeof options.groupKind === 'string') {
                    group =
                      element.type === 'SpreadElement' ? 'spread' : 'literal'
                  }
                  accumulator.at(0).push({
                    name:
                      element.type === 'Literal'
                        ? `${element.value}`
                        : sourceCode.text.slice(...element.range),
                    size: rangeToDiff(element.range),
                    type: element.type,
                    node: element,
                    group,
                  })
                }
                return accumulator
              },
              [[], []],
            )
            .flat()
          pairwise(nodes, (left, right) => {
            let groupKindOrder = ['unknown']
            if (typeof options.groupKind === 'string') {
              groupKindOrder =
                options.groupKind === 'literals-first'
                  ? ['literal', 'spread']
                  : ['spread', 'literal']
            }
            let leftNum = getGroupNumber(groupKindOrder, left)
            let rightNum = getGroupNumber(groupKindOrder, right)
            if (
              (options.groupKind !== 'mixed' && leftNum > rightNum) ||
              ((options.groupKind === 'mixed' || leftNum === rightNum) &&
                isPositive(compare(left, right, options)))
            ) {
              context.report({
                messageId: 'unexpectedArrayIncludesOrder',
                data: {
                  left: toSingleLine(left.name),
                  right: toSingleLine(right.name),
                },
                node: right.node,
                fix: fixer => {
                  let sortedNodes =
                    options.groupKind !== 'mixed'
                      ? groupKindOrder
                          .map(group => nodes.filter(n => n.group === group))
                          .map(groupedNodes => sortNodes(groupedNodes, options))
                          .flat()
                      : sortNodes(nodes, options)
                  return makeFixes(fixer, nodes, sortedNodes, sourceCode)
                },
              })
            }
          })
        }
      }
    },
  }),
})
export { sortArrayIncludes as default }
