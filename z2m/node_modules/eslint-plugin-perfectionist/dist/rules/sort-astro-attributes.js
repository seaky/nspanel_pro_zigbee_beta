'use strict'
const path = require('node:path')
const createEslintRule = require('../utils/create-eslint-rule.js')
const getGroupNumber = require('../utils/get-group-number.js')
const getSourceCode = require('../utils/get-source-code.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const isPositive = require('../utils/is-positive.js')
const useGroups = require('../utils/use-groups.js')
const makeFixes = require('../utils/make-fixes.js')
const sortNodes = require('../utils/sort-nodes.js')
const pairwise = require('../utils/pairwise.js')
const complete = require('../utils/complete.js')
const compare = require('../utils/compare.js')
const sortAstroAttributes = createEslintRule.createEslintRule({
  name: 'sort-astro-attributes',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted Astro attributes.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
          groups: {
            description: 'Specifies the order of the groups.',
            type: 'array',
            items: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
          customGroups: {
            description: 'Specifies custom groups.',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedAstroAttributesOrder:
        'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
      groups: [],
      customGroups: {},
    },
  ],
  // @ts-ignore
  create: context => {
    if (path.extname(context.filename) !== '.astro') {
      return {}
    }
    return {
      JSXElement: node => {
        let { attributes } = node.openingElement
        if (attributes.length > 1) {
          let options = complete.complete(context.options.at(0), {
            type: 'alphabetical',
            ignoreCase: true,
            customGroups: {},
            order: 'asc',
            groups: [],
          })
          let sourceCode = getSourceCode.getSourceCode(context)
          let parts = attributes.reduce(
            (accumulator, attribute) => {
              if (attribute.type === 'JSXSpreadAttribute') {
                accumulator.push([])
                return accumulator
              }
              let name =
                typeof attribute.name.name === 'string'
                  ? attribute.name.name
                  : sourceCode.text.slice(...attribute.name.range)
              let { getGroup, defineGroup, setCustomGroups } =
                useGroups.useGroups(options.groups)
              setCustomGroups(options.customGroups, name)
              if (attribute.type === 'AstroShorthandAttribute') {
                defineGroup('astro-shorthand')
                defineGroup('shorthand')
              }
              if (attribute.value === null) {
                defineGroup('shorthand')
              }
              if (attribute.loc.start.line !== attribute.loc.end.line) {
                defineGroup('multiline')
              }
              accumulator.at(-1).push({
                size: rangeToDiff.rangeToDiff(attribute.range),
                node: attribute,
                group: getGroup(),
                name,
              })
              return accumulator
            },
            [[]],
          )
          for (let nodes of parts) {
            pairwise.pairwise(nodes, (left, right) => {
              let leftNum = getGroupNumber.getGroupNumber(options.groups, left)
              let rightNum = getGroupNumber.getGroupNumber(
                options.groups,
                right,
              )
              if (
                leftNum > rightNum ||
                (leftNum === rightNum &&
                  isPositive.isPositive(compare.compare(left, right, options)))
              ) {
                context.report({
                  messageId: 'unexpectedAstroAttributesOrder',
                  data: {
                    left: left.name,
                    right: right.name,
                  },
                  node: right.node,
                  fix: fixer => {
                    let grouped = {}
                    for (let currentNode of nodes) {
                      let groupNum = getGroupNumber.getGroupNumber(
                        options.groups,
                        currentNode,
                      )
                      if (!(groupNum in grouped)) {
                        grouped[groupNum] = [currentNode]
                      } else {
                        grouped[groupNum] = sortNodes.sortNodes(
                          [...grouped[groupNum], currentNode],
                          options,
                        )
                      }
                    }
                    let sortedNodes = []
                    for (let group of Object.keys(grouped).sort(
                      (a, b) => Number(a) - Number(b),
                    )) {
                      sortedNodes.push(
                        ...sortNodes.sortNodes(grouped[group], options),
                      )
                    }
                    return makeFixes.makeFixes(
                      fixer,
                      nodes,
                      sortedNodes,
                      sourceCode,
                    )
                  },
                })
              }
            })
          }
        }
      },
    }
  },
})
module.exports = sortAstroAttributes
