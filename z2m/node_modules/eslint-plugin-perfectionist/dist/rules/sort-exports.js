'use strict'
const createEslintRule = require('../utils/create-eslint-rule.js')
const getSourceCode = require('../utils/get-source-code.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const isPositive = require('../utils/is-positive.js')
const sortNodes = require('../utils/sort-nodes.js')
const makeFixes = require('../utils/make-fixes.js')
const complete = require('../utils/complete.js')
const pairwise = require('../utils/pairwise.js')
const compare = require('../utils/compare.js')
const sortExports = createEslintRule.createEslintRule({
  name: 'sort-exports',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted exports.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedExportsOrder: 'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
    },
  ],
  create: context => {
    let options = complete.complete(context.options.at(0), {
      type: 'alphabetical',
      ignoreCase: true,
      order: 'asc',
    })
    let parts = [[]]
    let registerNode = node => {
      parts.at(-1).push({
        size: rangeToDiff.rangeToDiff(node.range),
        name: node.source.value,
        node,
      })
    }
    return {
      ExportAllDeclaration: registerNode,
      ExportNamedDeclaration: node => {
        if (node.source !== null) {
          registerNode(node)
        }
      },
      'Program:exit': () => {
        let sourceCode = getSourceCode.getSourceCode(context)
        for (let nodes of parts) {
          pairwise.pairwise(nodes, (left, right) => {
            if (isPositive.isPositive(compare.compare(left, right, options))) {
              context.report({
                messageId: 'unexpectedExportsOrder',
                data: {
                  left: left.name,
                  right: right.name,
                },
                node: right.node,
                fix: fixer =>
                  makeFixes.makeFixes(
                    fixer,
                    nodes,
                    sortNodes.sortNodes(nodes, options),
                    sourceCode,
                  ),
              })
            }
          })
        }
      },
    }
  },
})
module.exports = sortExports
