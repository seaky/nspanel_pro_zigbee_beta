'use strict'
const minimatch = require('minimatch')
const path = require('node:path')
const createEslintRule = require('../utils/create-eslint-rule.js')
const getGroupNumber = require('../utils/get-group-number.js')
const getSourceCode = require('../utils/get-source-code.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const isPositive = require('../utils/is-positive.js')
const useGroups = require('../utils/use-groups.js')
const makeFixes = require('../utils/make-fixes.js')
const sortNodes = require('../utils/sort-nodes.js')
const pairwise = require('../utils/pairwise.js')
const complete = require('../utils/complete.js')
const compare = require('../utils/compare.js')
const sortJsxProps = createEslintRule.createEslintRule({
  name: 'sort-jsx-props',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted JSX props.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
          ignorePattern: {
            description:
              'Specifies names or patterns for nodes that should be ignored by rule.',
            items: {
              type: 'string',
            },
            type: 'array',
          },
          groups: {
            description: 'Specifies the order of the groups.',
            type: 'array',
            items: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
          customGroups: {
            description: 'Specifies custom groups.',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedJSXPropsOrder:
        'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
      ignorePattern: [],
      groups: [],
      customGroups: {},
    },
  ],
  create: context => {
    if (
      ['.svelte', '.astro', '.vue'].includes(path.extname(context.filename))
    ) {
      return {}
    }
    return {
      JSXElement: node => {
        if (node.openingElement.attributes.length > 1) {
          let options = complete.complete(context.options.at(0), {
            type: 'alphabetical',
            ignorePattern: [],
            ignoreCase: true,
            customGroups: {},
            order: 'asc',
            groups: [],
          })
          let sourceCode = getSourceCode.getSourceCode(context)
          let shouldIgnore = false
          if (options.ignorePattern.length) {
            let tagName = sourceCode.text.slice(
              ...node.openingElement.name.range,
            )
            shouldIgnore = options.ignorePattern.some(pattern =>
              minimatch.minimatch(tagName, pattern),
            )
          }
          if (!shouldIgnore && node.openingElement.attributes.length > 1) {
            let parts = node.openingElement.attributes.reduce(
              (accumulator, attribute) => {
                if (attribute.type === 'JSXSpreadAttribute') {
                  accumulator.push([])
                  return accumulator
                }
                let name =
                  attribute.name.type === 'JSXNamespacedName'
                    ? `${attribute.name.namespace.name}:${attribute.name.name.name}`
                    : attribute.name.name
                let { getGroup, defineGroup, setCustomGroups } =
                  useGroups.useGroups(options.groups)
                setCustomGroups(options.customGroups, name)
                if (attribute.value === null) {
                  defineGroup('shorthand')
                }
                if (attribute.loc.start.line !== attribute.loc.end.line) {
                  defineGroup('multiline')
                }
                let jsxNode = {
                  size: rangeToDiff.rangeToDiff(attribute.range),
                  group: getGroup(),
                  node: attribute,
                  name,
                }
                accumulator.at(-1).push(jsxNode)
                return accumulator
              },
              [[]],
            )
            for (let nodes of parts) {
              pairwise.pairwise(nodes, (left, right) => {
                let leftNum = getGroupNumber.getGroupNumber(
                  options.groups,
                  left,
                )
                let rightNum = getGroupNumber.getGroupNumber(
                  options.groups,
                  right,
                )
                if (
                  leftNum > rightNum ||
                  (leftNum === rightNum &&
                    isPositive.isPositive(
                      compare.compare(left, right, options),
                    ))
                ) {
                  context.report({
                    messageId: 'unexpectedJSXPropsOrder',
                    data: {
                      left: left.name,
                      right: right.name,
                    },
                    node: right.node,
                    fix: fixer => {
                      let grouped = {}
                      for (let currentNode of nodes) {
                        let groupNum = getGroupNumber.getGroupNumber(
                          options.groups,
                          currentNode,
                        )
                        if (!(groupNum in grouped)) {
                          grouped[groupNum] = [currentNode]
                        } else {
                          grouped[groupNum] = sortNodes.sortNodes(
                            [...grouped[groupNum], currentNode],
                            options,
                          )
                        }
                      }
                      let sortedNodes = []
                      for (let group of Object.keys(grouped).sort(
                        (a, b) => Number(a) - Number(b),
                      )) {
                        sortedNodes.push(
                          ...sortNodes.sortNodes(grouped[group], options),
                        )
                      }
                      return makeFixes.makeFixes(
                        fixer,
                        nodes,
                        sortedNodes,
                        sourceCode,
                      )
                    },
                  })
                }
              })
            }
          }
        }
      },
    }
  },
})
module.exports = sortJsxProps
