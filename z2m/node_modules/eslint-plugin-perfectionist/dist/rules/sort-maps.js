'use strict'
const createEslintRule = require('../utils/create-eslint-rule.js')
const getSourceCode = require('../utils/get-source-code.js')
const toSingleLine = require('../utils/to-single-line.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const isPositive = require('../utils/is-positive.js')
const sortNodes = require('../utils/sort-nodes.js')
const makeFixes = require('../utils/make-fixes.js')
const complete = require('../utils/complete.js')
const pairwise = require('../utils/pairwise.js')
const compare = require('../utils/compare.js')
const sortMaps = createEslintRule.createEslintRule({
  name: 'sort-maps',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted Map elements.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedMapElementsOrder:
        'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
    },
  ],
  create: context => ({
    NewExpression: node => {
      var _a
      if (
        node.callee.type === 'Identifier' &&
        node.callee.name === 'Map' &&
        node.arguments.length &&
        ((_a = node.arguments[0]) == null ? void 0 : _a.type) ===
          'ArrayExpression'
      ) {
        let [{ elements }] = node.arguments
        if (elements.length > 1) {
          let options = complete.complete(context.options.at(0), {
            type: 'alphabetical',
            ignoreCase: true,
            order: 'asc',
          })
          let sourceCode = getSourceCode.getSourceCode(context)
          let parts = elements.reduce(
            (accumulator, element) => {
              if (element === null || element.type === 'SpreadElement') {
                accumulator.push([])
              } else {
                accumulator.at(-1).push(element)
              }
              return accumulator
            },
            [[]],
          )
          for (let part of parts) {
            let nodes = part.map(element => {
              let name
              if (element.type === 'ArrayExpression') {
                let [left] = element.elements
                if (!left) {
                  name = `${left}`
                } else if (left.type === 'Literal') {
                  name = left.raw
                } else {
                  name = sourceCode.text.slice(...left.range)
                }
              } else {
                name = sourceCode.text.slice(...element.range)
              }
              return {
                size: rangeToDiff.rangeToDiff(element.range),
                node: element,
                name,
              }
            })
            pairwise.pairwise(nodes, (left, right) => {
              if (
                isPositive.isPositive(compare.compare(left, right, options))
              ) {
                context.report({
                  messageId: 'unexpectedMapElementsOrder',
                  data: {
                    left: toSingleLine.toSingleLine(left.name),
                    right: toSingleLine.toSingleLine(right.name),
                  },
                  node: right.node,
                  fix: fixer =>
                    makeFixes.makeFixes(
                      fixer,
                      nodes,
                      sortNodes.sortNodes(nodes, options),
                      sourceCode,
                    ),
                })
              }
            })
          }
        }
      }
    },
  }),
})
module.exports = sortMaps
