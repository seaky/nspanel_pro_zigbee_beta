'use strict'
const createEslintRule = require('../utils/create-eslint-rule.js')
const getGroupNumber = require('../utils/get-group-number.js')
const getSourceCode = require('../utils/get-source-code.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const isPositive = require('../utils/is-positive.js')
const sortNodes = require('../utils/sort-nodes.js')
const makeFixes = require('../utils/make-fixes.js')
const complete = require('../utils/complete.js')
const pairwise = require('../utils/pairwise.js')
const compare = require('../utils/compare.js')
const sortNamedExports = createEslintRule.createEslintRule({
  name: 'sort-named-exports',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted named exports.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
          groupKind: {
            description: 'Specifies top-level groups.',
            enum: ['mixed', 'values-first', 'types-first'],
            type: 'string',
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedNamedExportsOrder:
        'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
      groupKind: 'mixed',
    },
  ],
  create: context => ({
    ExportNamedDeclaration: node => {
      if (node.specifiers.length > 1) {
        let options = complete.complete(context.options.at(0), {
          type: 'alphabetical',
          groupKind: 'mixed',
          ignoreCase: true,
          order: 'asc',
        })
        let sourceCode = getSourceCode.getSourceCode(context)
        let nodes = node.specifiers.map(specifier => {
          let group
          if (specifier.exportKind === 'type') {
            group = 'type'
          } else {
            group = 'value'
          }
          return {
            size: rangeToDiff.rangeToDiff(specifier.range),
            name: specifier.local.name,
            node: specifier,
            group,
          }
        })
        let shouldGroupByKind = options.groupKind !== 'mixed'
        let groupKindOrder =
          options.groupKind === 'values-first'
            ? ['value', 'type']
            : ['type', 'value']
        pairwise.pairwise(nodes, (left, right) => {
          let leftNum = getGroupNumber.getGroupNumber(groupKindOrder, left)
          let rightNum = getGroupNumber.getGroupNumber(groupKindOrder, right)
          if (
            (shouldGroupByKind && leftNum > rightNum) ||
            ((!shouldGroupByKind || leftNum === rightNum) &&
              isPositive.isPositive(compare.compare(left, right, options)))
          ) {
            let sortedNodes = shouldGroupByKind
              ? groupKindOrder
                  .map(group => nodes.filter(n => n.group === group))
                  .map(groupedNodes =>
                    sortNodes.sortNodes(groupedNodes, options),
                  )
                  .flat()
              : sortNodes.sortNodes(nodes, options)
            context.report({
              messageId: 'unexpectedNamedExportsOrder',
              data: {
                left: left.name,
                right: right.name,
              },
              node: right.node,
              fix: fixer =>
                makeFixes.makeFixes(fixer, nodes, sortedNodes, sourceCode),
            })
          }
        })
      }
    },
  }),
})
module.exports = sortNamedExports
