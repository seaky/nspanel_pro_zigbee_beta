'use strict'
const minimatch = require('minimatch')
const isPartitionComment = require('../utils/is-partition-comment.js')
const getCommentBefore = require('../utils/get-comment-before.js')
const createEslintRule = require('../utils/create-eslint-rule.js')
const getLinesBetween = require('../utils/get-lines-between.js')
const getGroupNumber = require('../utils/get-group-number.js')
const getSourceCode = require('../utils/get-source-code.js')
const getNodeParent = require('../utils/get-node-parent.js')
const toSingleLine = require('../utils/to-single-line.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const isPositive = require('../utils/is-positive.js')
const useGroups = require('../utils/use-groups.js')
const makeFixes = require('../utils/make-fixes.js')
const sortNodes = require('../utils/sort-nodes.js')
const complete = require('../utils/complete.js')
const pairwise = require('../utils/pairwise.js')
const compare = require('../utils/compare.js')
const sortObjects = createEslintRule.createEslintRule({
  name: 'sort-objects',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted objects.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
          partitionByComment: {
            description:
              'Allows you to use comments to separate the class members into logical groups.',
            anyOf: [
              {
                type: 'array',
                items: {
                  type: 'string',
                },
              },
              {
                type: 'boolean',
              },
              {
                type: 'string',
              },
            ],
          },
          partitionByNewLine: {
            description:
              'Allows to use spaces to separate the nodes into logical groups.',
            type: 'boolean',
          },
          styledComponents: {
            description: 'Controls whether to sort styled components.',
            type: 'boolean',
          },
          ignorePattern: {
            description:
              'Specifies names or patterns for nodes that should be ignored by rule.',
            items: {
              type: 'string',
            },
            type: 'array',
          },
          customIgnore: {
            description: 'Specifies custom ignore functions.',
            type: 'array',
          },
          groups: {
            description: 'Specifies the order of the groups.',
            type: 'array',
            items: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
          customGroups: {
            description: 'Specifies custom groups.',
            type: 'object',
            additionalProperties: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedObjectsOrder: 'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
      partitionByComment: false,
      partitionByNewLine: false,
      styledComponents: true,
      ignorePattern: [],
      customIgnore: [],
      groups: [],
      customGroups: {},
    },
  ],
  create: context => {
    let sortObject = node => {
      let options = complete.complete(context.options.at(0), {
        partitionByNewLine: false,
        partitionByComment: false,
        styledComponents: true,
        type: 'alphabetical',
        ignorePattern: [],
        ignoreCase: true,
        customGroups: {},
        customIgnore: [],
        order: 'asc',
        groups: [],
      })
      let shouldIgnore = false
      if (
        options.customIgnore.length &&
        options.customIgnore.some(fn => fn(node, context.filename))
      ) {
        shouldIgnore = true
      }
      if (!shouldIgnore && options.ignorePattern.length) {
        let varParent = getNodeParent.getNodeParent(node, [
          'VariableDeclarator',
          'Property',
        ])
        let parentId =
          (varParent == null ? void 0 : varParent.type) === 'VariableDeclarator'
            ? varParent.id
            : varParent == null
              ? void 0
              : varParent.key
        let varIdentifier =
          (parentId == null ? void 0 : parentId.type) === 'Identifier'
            ? parentId.name
            : null
        let checkMatch = identifier =>
          options.ignorePattern.some(pattern =>
            minimatch.minimatch(identifier, pattern, {
              nocomment: true,
            }),
          )
        if (typeof varIdentifier === 'string' && checkMatch(varIdentifier)) {
          shouldIgnore = true
        }
        let callParent = getNodeParent.getNodeParent(node, ['CallExpression'])
        let callIdentifier =
          (callParent == null ? void 0 : callParent.type) ===
            'CallExpression' && callParent.callee.type === 'Identifier'
            ? callParent.callee.name
            : null
        if (callIdentifier && checkMatch(callIdentifier)) {
          shouldIgnore = true
        }
      }
      if (!shouldIgnore && node.properties.length > 1) {
        let isStyledCallExpression = identifier =>
          identifier.type === 'Identifier' && identifier.name === 'styled'
        let isCssCallExpression = identifier =>
          identifier.type === 'Identifier' && identifier.name === 'css'
        let isStyledComponents = styledNode =>
          styledNode !== void 0 &&
          styledNode.type === 'CallExpression' &&
          (isCssCallExpression(styledNode.callee) ||
            (styledNode.callee.type === 'MemberExpression' &&
              isStyledCallExpression(styledNode.callee.object)) ||
            (styledNode.callee.type === 'CallExpression' &&
              isStyledCallExpression(styledNode.callee.callee)))
        if (
          !options.styledComponents &&
          (isStyledComponents(node.parent) ||
            (node.parent.type === 'ArrowFunctionExpression' &&
              isStyledComponents(node.parent.parent)))
        ) {
          return
        }
        let sourceCode = getSourceCode.getSourceCode(context)
        let formatProperties = props =>
          props.reduce(
            (accumulator, prop) => {
              var _a
              if (
                prop.type === 'SpreadElement' ||
                prop.type === 'RestElement'
              ) {
                accumulator.push([])
                return accumulator
              }
              let comment = getCommentBefore.getCommentBefore(prop, sourceCode)
              let lastProp =
                (_a = accumulator.at(-1)) == null ? void 0 : _a.at(-1)
              if (
                options.partitionByComment &&
                comment &&
                isPartitionComment.isPartitionComment(
                  options.partitionByComment,
                  comment.value,
                )
              ) {
                accumulator.push([])
              }
              let name
              let position = 'ignore'
              let dependencies = []
              let { getGroup, setCustomGroups } = useGroups.useGroups(
                options.groups,
              )
              if (prop.key.type === 'Identifier') {
                ;({ name } = prop.key)
              } else if (prop.key.type === 'Literal') {
                name = `${prop.key.value}`
              } else {
                name = sourceCode.text.slice(...prop.key.range)
              }
              let propSortingNode = {
                size: rangeToDiff.rangeToDiff(prop.range),
                node: prop,
                name,
              }
              if (
                options.partitionByNewLine &&
                lastProp &&
                getLinesBetween.getLinesBetween(
                  sourceCode,
                  lastProp,
                  propSortingNode,
                )
              ) {
                accumulator.push([])
              }
              if (prop.value.type === 'AssignmentPattern') {
                let addDependencies = value2 => {
                  if (value2.right.type === 'Identifier') {
                    dependencies.push(value2.right.name)
                  }
                  let handleComplexExpression = expression => {
                    let nodes = []
                    switch (expression.type) {
                      case 'ArrowFunctionExpression':
                        nodes.push(expression.body)
                        break
                      case 'ConditionalExpression':
                        nodes.push(expression.consequent, expression.alternate)
                        break
                      case 'LogicalExpression':
                      case 'BinaryExpression':
                        nodes.push(expression.left, expression.right)
                        break
                      case 'CallExpression':
                        nodes.push(...expression.arguments)
                        break
                    }
                    nodes.forEach(nestedNode => {
                      if (nestedNode.type === 'Identifier') {
                        dependencies.push(nestedNode.name)
                      }
                      if (
                        nestedNode.type === 'BinaryExpression' ||
                        nestedNode.type === 'ConditionalExpression'
                      ) {
                        handleComplexExpression(nestedNode)
                      }
                    })
                  }
                  switch (value2.right.type) {
                    case 'ArrowFunctionExpression':
                    case 'ConditionalExpression':
                    case 'LogicalExpression':
                    case 'BinaryExpression':
                    case 'CallExpression':
                      handleComplexExpression(value2.right)
                      break
                  }
                }
                addDependencies(prop.value)
              }
              setCustomGroups(options.customGroups, name)
              let value = {
                ...propSortingNode,
                group: getGroup(),
                dependencies,
                position,
              }
              accumulator.at(-1).push(value)
              return accumulator
            },
            [[]],
          )
        for (let nodes of formatProperties(node.properties)) {
          pairwise.pairwise(nodes, (left, right) => {
            let leftNum = getGroupNumber.getGroupNumber(options.groups, left)
            let rightNum = getGroupNumber.getGroupNumber(options.groups, right)
            if (
              leftNum > rightNum ||
              (leftNum === rightNum &&
                isPositive.isPositive(compare.compare(left, right, options)))
            ) {
              let fix = fixer => {
                let grouped = {}
                for (let currentNode of nodes) {
                  let groupNum = getGroupNumber.getGroupNumber(
                    options.groups,
                    currentNode,
                  )
                  if (!(groupNum in grouped)) {
                    grouped[groupNum] = [currentNode]
                  } else {
                    grouped[groupNum] = sortNodes.sortNodes(
                      [...grouped[groupNum], currentNode],
                      options,
                    )
                  }
                }
                let sortedNodes = []
                for (let group of Object.keys(grouped).sort(
                  (a, b) => Number(a) - Number(b),
                )) {
                  sortedNodes.push(
                    ...sortNodes.sortNodes(grouped[group], options),
                  )
                }
                return makeFixes.makeFixes(
                  fixer,
                  nodes,
                  sortedNodes,
                  sourceCode,
                  {
                    partitionComment: options.partitionByComment,
                  },
                )
              }
              context.report({
                messageId: 'unexpectedObjectsOrder',
                data: {
                  left: toSingleLine.toSingleLine(left.name),
                  right: toSingleLine.toSingleLine(right.name),
                },
                node: right.node,
                fix,
              })
            }
          })
        }
      }
    }
    return {
      ObjectExpression: sortObject,
      ObjectPattern: sortObject,
    }
  },
})
module.exports = sortObjects
