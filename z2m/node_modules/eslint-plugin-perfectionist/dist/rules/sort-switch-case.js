'use strict'
const createEslintRule = require('../utils/create-eslint-rule.js')
const getSourceCode = require('../utils/get-source-code.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const isPositive = require('../utils/is-positive.js')
const makeFixes = require('../utils/make-fixes.js')
const sortNodes = require('../utils/sort-nodes.js')
const pairwise = require('../utils/pairwise.js')
const complete = require('../utils/complete.js')
const compare = require('../utils/compare.js')
const sortSwitchCase = createEslintRule.createEslintRule({
  name: 'sort-switch-case',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted switch cases.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedSwitchCaseOrder:
        'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
    },
  ],
  create: context => ({
    SwitchStatement: node => {
      let options = complete.complete(context.options.at(0), {
        type: 'alphabetical',
        ignoreCase: true,
        order: 'asc',
      })
      let sourceCode = getSourceCode.getSourceCode(context)
      let isDiscriminantIdentifier = node.discriminant.type === 'Identifier'
      let isCasesHasBreak = node.cases
        .filter(caseNode => caseNode.test !== null)
        .every(
          caseNode =>
            caseNode.consequent.length === 0 ||
            caseNode.consequent.some(
              currentConsequent =>
                currentConsequent.type === 'BreakStatement' ||
                currentConsequent.type === 'ReturnStatement',
            ),
        )
      if (isDiscriminantIdentifier && isCasesHasBreak) {
        let nodes = node.cases.map(caseNode => {
          var _a, _b
          let name
          if (((_a = caseNode.test) == null ? void 0 : _a.type) === 'Literal') {
            name = `${caseNode.test.value}`
          } else {
            name = 'default'
          }
          return {
            size: rangeToDiff.rangeToDiff(
              ((_b = caseNode.test) == null ? void 0 : _b.range) ??
                caseNode.range,
            ),
            node: caseNode,
            name,
          }
        })
        pairwise.pairwise(nodes, (left, right, iteration) => {
          let compareValue
          let lefter = nodes.at(iteration - 1)
          let isCaseGrouped =
            (lefter == null ? void 0 : lefter.node.consequent.length) === 0 &&
            left.node.consequent.length !== 0
          let caseGroup = [left]
          for (let i = iteration - 1; i >= 0; i--) {
            if (nodes.at(i).node.consequent.length === 0) {
              caseGroup.unshift(nodes.at(i))
            } else {
              break
            }
          }
          if (left.name === 'default') {
            compareValue = true
          } else if (right.name === 'default') {
            compareValue = false
          } else if (isCaseGrouped) {
            compareValue = isPositive.isPositive(
              compare.compare(caseGroup[0], right, options),
            )
          } else {
            compareValue = isPositive.isPositive(
              compare.compare(left, right, options),
            )
          }
          if (compareValue) {
            context.report({
              messageId: 'unexpectedSwitchCaseOrder',
              data: {
                left: left.name,
                right: right.name,
              },
              node: right.node,
              fix: fixer => {
                let nodeGroups = nodes.reduce(
                  (accumulator, currentNode, index) => {
                    var _a
                    if (index === 0) {
                      accumulator.at(-1).push(currentNode)
                    } else if (
                      ((_a = accumulator.at(-1).at(-1)) == null
                        ? void 0
                        : _a.node.consequent.length) === 0
                    ) {
                      accumulator.at(-1).push(currentNode)
                    } else {
                      accumulator.push([currentNode])
                    }
                    return accumulator
                  },
                  [[]],
                )
                let sortedNodeGroups = nodeGroups
                  .map(group => {
                    let { consequent } = group.at(-1).node
                    group.at(-1).node.consequent = []
                    let sortedGroup = sortNodes.sortNodes(group, options)
                    sortedGroup.at(-1).node.consequent = consequent
                    return sortedGroup
                  })
                  .toSorted((a, b) => {
                    let isGroupContainsDefault = group =>
                      group.some(currentNode => currentNode.name === 'default')
                    if (isGroupContainsDefault(a)) {
                      return 1
                    } else if (isGroupContainsDefault(b)) {
                      return -1
                    }
                    return compare.compare(a.at(0), b.at(0), options)
                  })
                let sortedNodes = sortedNodeGroups.flat()
                for (let i = 0, max = sortedNodes.length; i < max; i++) {
                  if (sortedNodes.at(i).name === 'default') {
                    sortedNodes.push(sortedNodes.splice(i, 1).at(0))
                  }
                }
                return makeFixes.makeFixes(
                  fixer,
                  nodes,
                  sortedNodes,
                  sourceCode,
                )
              },
            })
          }
        })
      }
    },
  }),
})
module.exports = sortSwitchCase
