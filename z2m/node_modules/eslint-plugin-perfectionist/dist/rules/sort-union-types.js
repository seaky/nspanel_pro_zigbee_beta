'use strict'
const createEslintRule = require('../utils/create-eslint-rule.js')
const getGroupNumber = require('../utils/get-group-number.js')
const getSourceCode = require('../utils/get-source-code.js')
const toSingleLine = require('../utils/to-single-line.js')
const rangeToDiff = require('../utils/range-to-diff.js')
const isPositive = require('../utils/is-positive.js')
const useGroups = require('../utils/use-groups.js')
const sortNodes = require('../utils/sort-nodes.js')
const makeFixes = require('../utils/make-fixes.js')
const complete = require('../utils/complete.js')
const pairwise = require('../utils/pairwise.js')
const compare = require('../utils/compare.js')
const sortUnionTypes = createEslintRule.createEslintRule({
  name: 'sort-union-types',
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Enforce sorted union types.',
    },
    fixable: 'code',
    schema: [
      {
        type: 'object',
        properties: {
          type: {
            description: 'Specifies the sorting method.',
            type: 'string',
            enum: ['alphabetical', 'natural', 'line-length'],
          },
          order: {
            description:
              'Determines whether the sorted items should be in ascending or descending order.',
            type: 'string',
            enum: ['asc', 'desc'],
          },
          ignoreCase: {
            description:
              'Controls whether sorting should be case-sensitive or not.',
            type: 'boolean',
          },
          groups: {
            description: 'Specifies the order of the groups.',
            type: 'array',
            items: {
              oneOf: [
                {
                  type: 'string',
                },
                {
                  type: 'array',
                  items: {
                    type: 'string',
                  },
                },
              ],
            },
          },
        },
        additionalProperties: false,
      },
    ],
    messages: {
      unexpectedUnionTypesOrder:
        'Expected "{{right}}" to come before "{{left}}".',
    },
  },
  defaultOptions: [
    {
      type: 'alphabetical',
      order: 'asc',
      ignoreCase: true,
      groups: [],
    },
  ],
  create: context => ({
    TSUnionType: node => {
      let options = complete.complete(context.options.at(0), {
        type: 'alphabetical',
        ignoreCase: true,
        order: 'asc',
        groups: [],
      })
      let sourceCode = getSourceCode.getSourceCode(context)
      let nodes = node.types.map(type => {
        let { getGroup, defineGroup } = useGroups.useGroups(options.groups)
        switch (type.type) {
          case 'TSConditionalType':
            defineGroup('conditional')
            break
          case 'TSConstructorType':
          case 'TSFunctionType':
            defineGroup('function')
            break
          case 'TSImportType':
            defineGroup('import')
            break
          case 'TSIntersectionType':
            defineGroup('intersection')
            break
          case 'TSAnyKeyword':
          case 'TSBigIntKeyword':
          case 'TSBooleanKeyword':
          case 'TSNeverKeyword':
          case 'TSNumberKeyword':
          case 'TSObjectKeyword':
          case 'TSStringKeyword':
          case 'TSSymbolKeyword':
          case 'TSThisType':
          case 'TSUnknownKeyword':
          case 'TSIntrinsicKeyword':
            defineGroup('keyword')
            break
          case 'TSLiteralType':
          case 'TSTemplateLiteralType':
            defineGroup('literal')
            break
          case 'TSArrayType':
          case 'TSIndexedAccessType':
          case 'TSInferType':
          case 'TSTypeReference':
          case 'TSQualifiedName':
            defineGroup('named')
            break
          case 'TSMappedType':
          case 'TSTypeLiteral':
            defineGroup('object')
            break
          case 'TSTypeQuery':
          case 'TSTypeOperator':
            defineGroup('operator')
            break
          case 'TSTupleType':
            defineGroup('tuple')
            break
          case 'TSUnionType':
            defineGroup('union')
            break
          case 'TSNullKeyword':
          case 'TSUndefinedKeyword':
          case 'TSVoidKeyword':
            defineGroup('nullish')
            break
        }
        return {
          name: sourceCode.text.slice(...type.range),
          size: rangeToDiff.rangeToDiff(type.range),
          group: getGroup(),
          node: type,
        }
      })
      pairwise.pairwise(nodes, (left, right) => {
        let leftNum = getGroupNumber.getGroupNumber(options.groups, left)
        let rightNum = getGroupNumber.getGroupNumber(options.groups, right)
        if (
          leftNum > rightNum ||
          (leftNum === rightNum &&
            isPositive.isPositive(compare.compare(left, right, options)))
        ) {
          context.report({
            messageId: 'unexpectedUnionTypesOrder',
            data: {
              left: toSingleLine.toSingleLine(left.name),
              right: toSingleLine.toSingleLine(right.name),
            },
            node: right.node,
            fix: fixer => {
              let grouped = {}
              for (let currentNode of nodes) {
                let groupNum = getGroupNumber.getGroupNumber(
                  options.groups,
                  currentNode,
                )
                if (!(groupNum in grouped)) {
                  grouped[groupNum] = [currentNode]
                } else {
                  grouped[groupNum] = sortNodes.sortNodes(
                    [...grouped[groupNum], currentNode],
                    options,
                  )
                }
              }
              let sortedNodes = []
              for (let group of Object.keys(grouped).sort(
                (a, b) => Number(a) - Number(b),
              )) {
                sortedNodes.push(
                  ...sortNodes.sortNodes(grouped[group], options),
                )
              }
              return makeFixes.makeFixes(fixer, nodes, sortedNodes, sourceCode)
            },
          })
        }
      })
    },
  }),
})
module.exports = sortUnionTypes
