import { Zh, Reporting } from './types';
export declare function payload(attribute: string | number, min: number, max: number, change: number, overrides?: Reporting.Override): {
    attribute: string | number;
    minimumReportInterval: number;
    maximumReportInterval: number;
    reportableChange: number;
}[];
export declare function readEletricalMeasurementMultiplierDivisors(endpoint: Zh.Endpoint, readFrequencyAttrs?: boolean): Promise<void>;
export declare function readMeteringMultiplierDivisor(endpoint: Zh.Endpoint): Promise<void>;
export declare function bind(endpoint: Zh.Endpoint, target: Zh.Endpoint, clusters: (number | string)[]): Promise<void>;
export declare const currentPositionLiftPercentage: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const currentPositionTiltPercentage: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const batteryPercentageRemaining: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const batteryVoltage: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const batteryAlarmState: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const onOff: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const onTime: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const lockState: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const doorState: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const brightness: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const colorTemperature: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const occupancy: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const temperature: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const co2: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const deviceTemperature: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const pressure: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const pressureExtended: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const illuminance: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const instantaneousDemand: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const currentSummDelivered: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const currentSummReceived: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatSystemMode: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const humidity: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatKeypadLockMode: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatTemperature: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatTemperatureCalibration: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatOccupiedHeatingSetpoint: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatUnoccupiedHeatingSetpoint: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatOccupiedCoolingSetpoint: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatUnoccupiedCoolingSetpoint: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatPIHeatingDemand: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatRunningState: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatRunningMode: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatOccupancy: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatTemperatureSetpointHold: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatTemperatureSetpointHoldDuration: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const thermostatAcLouverPosition: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const presentValue: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const activePower: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const reactivePower: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const apparentPower: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const rmsCurrent: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const rmsVoltage: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const powerFactor: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const fanMode: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const soil_moisture: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
export declare const acFrequency: (endpoint: Zh.Endpoint, overrides?: Reporting.Override) => Promise<void>;
//# sourceMappingURL=reporting.d.ts.map